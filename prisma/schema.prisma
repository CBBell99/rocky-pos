generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Represents different roles an employee can have
enum EmployeeRole {
  HOST
  KITCHEN
  ADMIN
}

// Represents different modification types for menu items
enum ModificationType {
  ADD
  REMOVE
  EXTRA
  SUBSTITUTE
}

model MenuItem {
  id            Int           @id @default(autoincrement())
  name          String
  description   String?
  price         Float
  category      String
  availability  Boolean
  orders        OrderItem[]
}

model Order {
  id             Int           @id @default(autoincrement())
  orderDate      DateTime
  tableNumber    Int
  status         String        // Possible values: Open, Closed
  totalAmount    Float
  orderItems     OrderItem[]
  transactions   Transaction[]
  kitchenOrders  KitchenOrder[] // Add this line for the KitchenOrder relationship
  barOrders      BarOrder[]     // Add this line for the BarOrder relationship
}

model OrderItem {
  id              Int           @id @default(autoincrement())
  quantity        Int
  subtotal        Float
  menuItem        MenuItem      @relation(fields: [menuItemId], references: [id])
  menuItemId      Int
  order           Order         @relation(fields: [orderId], references: [id])
  orderId         Int
  modifications   Modification[]
}

model Modification {
  id              Int           @id @default(autoincrement())
  modificationType ModificationType
  modificationDesc String
  priceAdjustment Float
  orderItem       OrderItem     @relation(fields: [orderItemId], references: [id])
  orderItemId     Int
}

model Employee {
  id              Int           @id @default(autoincrement())
  firstName       String        // Added firstName field
  lastName        String        // Added lastName field
  role            EmployeeRole  // Possible values: EMPLOYEE, ADMIN
  email           String?        @unique
  hashedPassword  String?
}

model Table {
  tableNumber     Int           @id
  capacity        Int
  status          String        // Possible values: Occupied, Available, Reserved
}

model Transaction {
  id              Int           @id @default(autoincrement())
  transactionDate DateTime
  paymentMethod   String
  totalAmount     Float
  tip             Float
  order           Order         @relation(fields: [orderId], references: [id])
  orderId         Int
  payments        Payment[]
}

enum PaymentType {
  CASH
  CARD
}

model Payment {
  id              Int           @id @default(autoincrement())
  paymentAmount   Float
  paymentDate     DateTime
  paymentType     PaymentType   // Possible values: CASH, CARD
  transaction     Transaction   @relation(fields: [transactionId], references: [id])
  transactionId   Int
}

model KitchenOrder {
  id              Int           @id @default(autoincrement())
  status          String        // Possible values: Pending, In Progress, Completed
  timestamp       DateTime
  order           Order         @relation(fields: [orderId], references: [id])
  orderId         Int
}

model BarOrder {
  id              Int           @id @default(autoincrement())
  status          String        // Possible values: Pending, In Progress, Completed
  timestamp       DateTime
  order           Order         @relation(fields: [orderId], references: [id])
  orderId         Int
}
